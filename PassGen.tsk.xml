<TaskerData sr="" dvi="1" tv="4.8u4m">
	<Task sr="task16">
		<cdate>1465590166218</cdate>
		<edate>1466179025304</edate>
		<id>16</id>
		<nme>PassGen - 0.0.1</nme>
		<pri>100</pri>
		<Action sr="act0" ve="7">
			<code>547</code>
			<Str sr="arg0" ve="3">%salt</Str>
			<Str sr="arg1" ve="3">PUT YOUR SALT HERE</Str>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="0"/>
		</Action>
		<Action sr="act1" ve="7">
			<code>547</code>
			<Str sr="arg0" ve="3">%length</Str>
			<Str sr="arg1" ve="3">40</Str>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="0"/>
		</Action>
		<Action sr="act2" ve="7">
			<code>129</code>
			<Str sr="arg0" ve="3">'use strict';

var skein=(function(){var p,q,u,v,w,z,A,B,C,D,E,L;L=function(a,b){this.lo=a?a:0;this.hi=b?b:0};L.clone=function(a){return new L(a.lo,a.hi)};L.prototype={xor:function(a){this.lo^=a.lo;this.hi^=a.hi;return this},plus:(function(){var b,s;b=4*(1&lt;&lt;30);s=function(x,y){var t=x+y;if(x&lt;0){t+=b}if(y&lt;0){t+=b}return t};return function(a){this.lo=s(this.lo,a.lo);this.hi=(s(this.hi,a.hi)+(this.lo&gt;=b?1:0))%b;this.lo=this.lo%b;return this}}()),circ:function(n){var a,m;if(n&gt;=32){a=this.lo;this.lo=this.hi;this.hi=a;n-=32}m=32-n;a=(this.hi&lt;&lt;n)+(this.lo&gt;&gt;&gt;m);this.lo=(this.lo&lt;&lt;n)+(this.hi&gt;&gt;&gt;m);this.hi=a;return this},toString:(function(){var a,o;a=function(n){return("00"+n.toString(16)).slice(-2)};o=function(n){return a(n&amp;255)+a(n&gt;&gt;&gt;8)+a(n&gt;&gt;&gt;16)+a(n&gt;&gt;&gt;24)};return function(){return o(this.lo)+o(this.hi)}}())};p=[0,2,4,6,2,4,6,0,4,6,0,2,6,0,2,4];q=[1,3,5,7,1,7,5,3,1,3,5,7,1,7,5,3];u=String.fromCharCode;v=u(0);w=v+v+v+v;w+=w+w+w;w+=w;z=[[46,36,19,37,33,27,14,42,17,49,36,39,44,9,54,56],[39,30,34,24,13,50,10,17,25,29,39,43,8,35,56,22]];E=function(a,b,c){for(var i=0;i&lt;8;i+=1){C[i].plus(a[(c+i)%9])}C[5].plus(b[c%3]);C[6].plus(b[(c+1)%3]);C[7].plus(new L(c))};D=function(r){var a,b,i;for(i=0;i&lt;16;i+=1){a=p[i];b=q[i];C[a].plus(C[b]);C[b].circ(r[i]).xor(C[a])}};A=function(a,b){var c,d,i,j,e,f,g,h,k,l;l=b.length;if(l%32){b+=w.slice(l%32)}else if(l===0){b=w}d=[];j=0;for(i=0;i&lt;b.length;i+=4){d[j]=new L(b.charCodeAt(i)+b.charCodeAt(i+1)*0x10000,b.charCodeAt(i+2)+b.charCodeAt(i+3)*0x10000);j+=1}g=1&lt;&lt;30;a&lt;&lt;=24;h=d.length-8;for(e=0;e&lt;=h;e+=8){k=(e===h)?[new L(2*l),new L(0,g+a+(1&lt;&lt;31))]:[new L(8*e+64),new L(0,g+a)];k[2]=new L().xor(k[0]).xor(k[1]);c=C;c[8]=new L(0xa9fc1a22,0x1bd11bda);for(i=0;i&lt;8;i+=1){c[8].xor(c[i])}C=d.slice(e,e+8).map(L.clone);for(f=0;f&lt;18;f+=1){E(c,k,f);D(z[f%2])}E(c,k,f);for(i=0;i&lt;8;i+=1){C[i].xor(d[e+i])}g=0}};C=[new L(),new L(),new L(),new L(),new L(),new L(),new L(),new L()];A(4,u(0x4853,0x3341,1,0,512)+w.slice(5,16));B=C;return function(m){C=B.map(L.clone);A(48,m);A(63,v+v+v+v);return C.join("")}}());

(function() {
  var hasNode = (typeof process !== 'undefined' &amp;&amp; process.versions &amp;&amp; process.versions.node),
      hasTypedArray = (typeof Uint8Array !== 'undefined');
  if (hasNode &amp;&amp; require('fs').existsSync(__dirname + '/../build/Release/base91encdec.node')) {
    module.exports = require(__dirname + '/../build/Release/base91encdec.node');
    return;
  }
  var AVERAGE_ENCODING_RATIO = 1.2297,
      ENCODING_TABLE = [
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '!', '#', '$', '%', '&amp;', '(', ')', '*', '+', ',', '.', '/', ':', ';',
        '&lt;', '=', '&gt;', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~',
        '"'
      ],
      DECODING_TABLE = [
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 62, 90, 63, 64, 65, 66, 91, 67, 68, 69, 70, 71, 91, 72, 73,
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 74, 75, 76, 77, 78, 79,
        80,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 81, 91, 82, 83, 84,
        85, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 86, 87, 88, 89, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
        91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91
      ];

  var i = 0;

  var base91 = {
    encode: function(data) {
      var len = data.length,
          output = '', ebq = 0, en = 0, ev = 0, j = 0, byte = 0;

      if (typeof data === 'string') {
        for (i = 0; i &lt; len; ++i) {
          byte = data.charCodeAt(i);
          j = 0;
          var lenj = (byte &lt; 128
                      ? 1
                      : (byte &gt; 127 &amp;&amp; byte &lt; 2048
                         ? 2
                         : 3));
          for (; j &lt; lenj; ++j) {
            if (lenj === 1)
              ebq |= byte &lt;&lt; en;
            else if (lenj === 2) {
              if (j === 0)
                ebq |= ((byte &gt;&gt; 6) | 192) &lt;&lt; en;
              else
                ebq |= ((byte &amp; 63) | 128) &lt;&lt; en;
            } else {
              if (j === 0)
                ebq |= ((byte &gt;&gt; 12) | 224) &lt;&lt; en;
              else if (j === 1)
                ebq |= (((byte &gt;&gt; 6) &amp; 63) | 128) &lt;&lt; en;
              else
                ebq |= ((byte &amp; 63) | 128) &lt;&lt; en;
            }
            en += 8;
            if (en &gt; 13) {
              ev = ebq &amp; 8191;
              if (ev &gt; 88) {
                ebq &gt;&gt;= 13;
                en -= 13;
              } else {
                ev = ebq &amp; 16383;
                ebq &gt;&gt;= 14;
                en -= 14;
              }
              output += ENCODING_TABLE[ev % 91];
              output += ENCODING_TABLE[(ev / 91) | 0];
            }
          }
        }
      } else {
        for (i = 0; i &lt; len; ++i) {
          ebq |= (data[i] &amp; 255) &lt;&lt; en;
          en += 8;
          if (en &gt; 13) {
            ev = ebq &amp; 8191;
            if (ev &gt; 88) {
              ebq &gt;&gt;= 13;
              en -= 13;
            } else {
              ev = ebq &amp; 16383;
              ebq &gt;&gt;= 14;
              en -= 14;
            }
            output += ENCODING_TABLE[ev % 91];
            output += ENCODING_TABLE[(ev / 91) | 0];
          }
        }
      }

      if (en &gt; 0) {
        output += ENCODING_TABLE[ebq % 91];
        if (en &gt; 7 || ebq &gt; 90)
          output += ENCODING_TABLE[(ebq / 91) | 0];
      }

      return output;
    },
    decode: function(data) {
      var len = data.length,
          estimatedSize = ((len / AVERAGE_ENCODING_RATIO) | 0),
          dbq = 0, dn = 0, dv = -1, i = 0, o = -1, byte = 0,
          output = new Array(estimatedSize);

      if (typeof data === 'string') {
        for (i = 0; i &lt; len; ++i) {
          byte = data.charCodeAt(i);
          if (DECODING_TABLE[byte] === 91)
            continue;
          if (dv === -1)
            dv = DECODING_TABLE[byte];
          else {
            dv += DECODING_TABLE[byte] * 91;
            dbq |= dv &lt;&lt; dn;
            dn += ((dv &amp; 8191) &gt; 88 ? 13 : 14);
            do {
              if (++o &gt;= estimatedSize)
                output.push(dbq &amp; 0xFF);
              else
                output[o] = dbq &amp; 0xFF;
              dbq &gt;&gt;= 8;
              dn -= 8;
            } while (dn &gt; 7);
            dv = -1;
          }
        }
      } else {
        for (i = 0; i &lt; len; ++i) {
          byte = data[i];
          if (DECODING_TABLE[byte] === 91)
            continue;
          if (dv === -1)
            dv = DECODING_TABLE[byte];
          else {
            dv += DECODING_TABLE[byte] * 91;
            dbq |= dv &lt;&lt; dn;
            dn += ((dv &amp; 8191) &gt; 88 ? 13 : 14);
            do {
              if (++o &gt;= estimatedSize)
                output.push(dbq &amp; 0xFF);
              else
                output[o] = dbq &amp; 0xFF;
              dbq &gt;&gt;= 8;
              dn -= 8;
            } while (dn &gt; 7);
            dv = -1;
          }
        }
      }

      if (dv !== -1) {
        if (++o &gt;= estimatedSize)
          output.push(dbq | dv &lt;&lt; dn);
        else
          output[o] = (dbq | dv &lt;&lt; dn);
      }

      if (o &gt; -1 &amp;&amp; o &lt; estimatedSize - 1)
        output = output.slice(0, o + 1);

      var ret;
      if (hasNode)
        ret = new Buffer(output);
      else if (hasTypedArray) {
        ret = new Uint8Array(output.length);
        for (i = 0, len = output.length; i &lt; len; ++i)
          ret[i] = output[i];
      } else
        ret = output;

      return ret;
    }
  };

  if (hasNode)
    module.exports = base91;
  else
    window.base91 = base91;
})();

var sitestring = window.prompt('What string can you remember for this site?', '');

var hash = skein(sitestring.trim() + local('salt'));
var start = HexToInt(hash.substring(0,1)) + HexToInt(hash.substring(1,2)) + HexToInt(hash.substring(2,3));
var end = start + parseInt(local('length'));
var hashOut = base91.encode(hash).substring(start, end);

setClip(hashOut, false);

flash('Password copied to clipboard');

function HexToInt(hexString) {
  return parseInt(hexString, 16);
}</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="1"/>
			<Int sr="arg3" val="45"/>
		</Action>
		<Img sr="icn" ve="2">
			<nme>hl_device_access_accounts</nme>
		</Img>
	</Task>
</TaskerData>
